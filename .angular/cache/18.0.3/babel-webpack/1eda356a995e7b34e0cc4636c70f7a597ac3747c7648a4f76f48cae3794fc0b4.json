{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nvar Geolocation = /** @class */function (_super) {\n  __extends(Geolocation, _super);\n  function Geolocation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Geolocation.prototype.getCurrentPosition = function (options) {\n    return cordova(this, \"getCurrentPosition\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n  /**\n   * Watch the current device's position.  Clear the watch by unsubscribing from\n   * Observable changes.\n   *\n   * ```typescript\n   * const subscription = this.geolocation.watchPosition()\n   *                               .filter((p) => p.coords !== undefined) //Filter Out Errors\n   *                               .subscribe(position => {\n   *   console.log(position.coords.longitude + ' ' + position.coords.latitude);\n   * });\n   *\n   * // To stop notifications\n   * subscription.unsubscribe();\n   * ```\n   *\n   * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).\n   * @returns {Observable<Geoposition | PositionError>} Returns an Observable that notifies with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or errors.\n   */\n  Geolocation.prototype.watchPosition = function (options) {\n    return new Observable(function (observer) {\n      var watchId = navigator.geolocation.watchPosition(observer.next.bind(observer), observer.next.bind(observer), options);\n      return function () {\n        return navigator.geolocation.clearWatch(watchId);\n      };\n    });\n  };\n  Geolocation.pluginName = \"Geolocation\";\n  Geolocation.plugin = \"cordova-plugin-geolocation\";\n  Geolocation.pluginRef = \"navigator.geolocation\";\n  Geolocation.repo = \"https://github.com/apache/cordova-plugin-geolocation\";\n  Geolocation.install = \"ionic cordova plugin add cordova-plugin-geolocation --variable GEOLOCATION_USAGE_DESCRIPTION=\\\"To locate you\\\"\";\n  Geolocation.installVariables = [\"GEOLOCATION_USAGE_DESCRIPTION\"];\n  Geolocation.platforms = [\"Amazon Fire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\"];\n  Geolocation.decorators = [{\n    type: Injectable\n  }];\n  return Geolocation;\n}(IonicNativePlugin);\nexport { Geolocation };","map":{"version":3,"names":["__extends","Injectable","IonicNativePlugin","cordova","Observable","Geolocation","_super","apply","arguments","prototype","getCurrentPosition","options","watchPosition","observer","watchId","navigator","geolocation","next","bind","clearWatch","pluginName","plugin","pluginRef","repo","install","installVariables","platforms","decorators","type"],"sources":["C:/Users/Mehmet/kerzz-demo/node_modules/@ionic-native/geolocation/ngx/index.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nvar Geolocation = /** @class */ (function (_super) {\n    __extends(Geolocation, _super);\n    function Geolocation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Geolocation.prototype.getCurrentPosition = function (options) { return cordova(this, \"getCurrentPosition\", { \"callbackOrder\": \"reverse\" }, arguments); };\n    /**\n     * Watch the current device's position.  Clear the watch by unsubscribing from\n     * Observable changes.\n     *\n     * ```typescript\n     * const subscription = this.geolocation.watchPosition()\n     *                               .filter((p) => p.coords !== undefined) //Filter Out Errors\n     *                               .subscribe(position => {\n     *   console.log(position.coords.longitude + ' ' + position.coords.latitude);\n     * });\n     *\n     * // To stop notifications\n     * subscription.unsubscribe();\n     * ```\n     *\n     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).\n     * @returns {Observable<Geoposition | PositionError>} Returns an Observable that notifies with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or errors.\n     */\n    Geolocation.prototype.watchPosition = function (options) {\n        return new Observable(function (observer) {\n            var watchId = navigator.geolocation.watchPosition(observer.next.bind(observer), observer.next.bind(observer), options);\n            return function () { return navigator.geolocation.clearWatch(watchId); };\n        });\n    };\n    Geolocation.pluginName = \"Geolocation\";\n    Geolocation.plugin = \"cordova-plugin-geolocation\";\n    Geolocation.pluginRef = \"navigator.geolocation\";\n    Geolocation.repo = \"https://github.com/apache/cordova-plugin-geolocation\";\n    Geolocation.install = \"ionic cordova plugin add cordova-plugin-geolocation --variable GEOLOCATION_USAGE_DESCRIPTION=\\\"To locate you\\\"\";\n    Geolocation.installVariables = [\"GEOLOCATION_USAGE_DESCRIPTION\"];\n    Geolocation.platforms = [\"Amazon Fire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\"];\n    Geolocation.decorators = [\n        { type: Injectable }\n    ];\n    return Geolocation;\n}(IonicNativePlugin));\nexport { Geolocation };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,iBAAiB,EAAEC,OAAO,QAAQ,oBAAoB;AAC/D,SAASC,UAAU,QAAQ,MAAM;AACjC,IAAIC,WAAW,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC/CN,SAAS,CAACK,WAAW,EAAEC,MAAM,CAAC;EAC9B,SAASD,WAAWA,CAAA,EAAG;IACnB,OAAOC,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;EACnE;EACAH,WAAW,CAACI,SAAS,CAACC,kBAAkB,GAAG,UAAUC,OAAO,EAAE;IAAE,OAAOR,OAAO,CAAC,IAAI,EAAE,oBAAoB,EAAE;MAAE,eAAe,EAAE;IAAU,CAAC,EAAEK,SAAS,CAAC;EAAE,CAAC;EACxJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIH,WAAW,CAACI,SAAS,CAACG,aAAa,GAAG,UAAUD,OAAO,EAAE;IACrD,OAAO,IAAIP,UAAU,CAAC,UAAUS,QAAQ,EAAE;MACtC,IAAIC,OAAO,GAAGC,SAAS,CAACC,WAAW,CAACJ,aAAa,CAACC,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACL,QAAQ,CAAC,EAAEA,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACL,QAAQ,CAAC,EAAEF,OAAO,CAAC;MACtH,OAAO,YAAY;QAAE,OAAOI,SAAS,CAACC,WAAW,CAACG,UAAU,CAACL,OAAO,CAAC;MAAE,CAAC;IAC5E,CAAC,CAAC;EACN,CAAC;EACDT,WAAW,CAACe,UAAU,GAAG,aAAa;EACtCf,WAAW,CAACgB,MAAM,GAAG,4BAA4B;EACjDhB,WAAW,CAACiB,SAAS,GAAG,uBAAuB;EAC/CjB,WAAW,CAACkB,IAAI,GAAG,sDAAsD;EACzElB,WAAW,CAACmB,OAAO,GAAG,gHAAgH;EACtInB,WAAW,CAACoB,gBAAgB,GAAG,CAAC,+BAA+B,CAAC;EAChEpB,WAAW,CAACqB,SAAS,GAAG,CAAC,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;EAClFrB,WAAW,CAACsB,UAAU,GAAG,CACrB;IAAEC,IAAI,EAAE3B;EAAW,CAAC,CACvB;EACD,OAAOI,WAAW;AACtB,CAAC,CAACH,iBAAiB,CAAE;AACrB,SAASG,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}