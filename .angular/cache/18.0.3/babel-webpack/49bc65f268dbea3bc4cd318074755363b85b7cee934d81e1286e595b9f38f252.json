{"ast":null,"code":"var haversine = function () {\n  var RADII = {\n    km: 6371,\n    mile: 3960,\n    meter: 6371000,\n    nmi: 3440\n  };\n\n  // convert to radians\n  var toRad = function (num) {\n    return num * Math.PI / 180;\n  };\n\n  // convert coordinates to standard format based on the passed format option\n  var convertCoordinates = function (format, coordinates) {\n    switch (format) {\n      case '[lat,lon]':\n        return {\n          latitude: coordinates[0],\n          longitude: coordinates[1]\n        };\n      case '[lon,lat]':\n        return {\n          latitude: coordinates[1],\n          longitude: coordinates[0]\n        };\n      case '{lon,lat}':\n        return {\n          latitude: coordinates.lat,\n          longitude: coordinates.lon\n        };\n      case '{lat,lng}':\n        return {\n          latitude: coordinates.lat,\n          longitude: coordinates.lng\n        };\n      case 'geojson':\n        return {\n          latitude: coordinates.geometry.coordinates[1],\n          longitude: coordinates.geometry.coordinates[0]\n        };\n      default:\n        return coordinates;\n    }\n  };\n  return function haversine(startCoordinates, endCoordinates, options) {\n    options = options || {};\n    var R = options.unit in RADII ? RADII[options.unit] : RADII.km;\n    var start = convertCoordinates(options.format, startCoordinates);\n    var end = convertCoordinates(options.format, endCoordinates);\n    var dLat = toRad(end.latitude - start.latitude);\n    var dLon = toRad(end.longitude - start.longitude);\n    var lat1 = toRad(start.latitude);\n    var lat2 = toRad(end.latitude);\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    if (options.threshold) {\n      return options.threshold > R * c;\n    }\n    return R * c;\n  };\n}();\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = haversine;\n}","map":{"version":3,"names":["haversine","RADII","km","mile","meter","nmi","toRad","num","Math","PI","convertCoordinates","format","coordinates","latitude","longitude","lat","lon","lng","geometry","startCoordinates","endCoordinates","options","R","unit","start","end","dLat","dLon","lat1","lat2","a","sin","cos","c","atan2","sqrt","threshold","module","exports"],"sources":["C:/Users/Mehmet/kerzz-demo/node_modules/haversine/haversine.js"],"sourcesContent":["var haversine = (function () {\n  var RADII = {\n    km:    6371,\n    mile:  3960,\n    meter: 6371000,\n    nmi:   3440\n  }\n\n  // convert to radians\n  var toRad = function (num) {\n    return num * Math.PI / 180\n  }\n\n  // convert coordinates to standard format based on the passed format option\n  var convertCoordinates = function (format, coordinates) {\n    switch (format) {\n    case '[lat,lon]':\n      return { latitude: coordinates[0], longitude: coordinates[1] }\n    case '[lon,lat]':\n      return { latitude: coordinates[1], longitude: coordinates[0] }\n    case '{lon,lat}':\n      return { latitude: coordinates.lat, longitude: coordinates.lon }\n    case '{lat,lng}':\n      return { latitude: coordinates.lat, longitude: coordinates.lng }\n    case 'geojson':\n      return { latitude: coordinates.geometry.coordinates[1], longitude: coordinates.geometry.coordinates[0] }\n    default:\n      return coordinates\n    }\n  }\n\n  return function haversine (startCoordinates, endCoordinates, options) {\n    options   = options || {}\n\n    var R = options.unit in RADII\n      ? RADII[options.unit]\n      : RADII.km\n\n    var start = convertCoordinates(options.format, startCoordinates)\n    var end = convertCoordinates(options.format, endCoordinates)\n\n    var dLat = toRad(end.latitude - start.latitude)\n    var dLon = toRad(end.longitude - start.longitude)\n    var lat1 = toRad(start.latitude)\n    var lat2 = toRad(end.latitude)\n\n    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n            Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2)\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n\n    if (options.threshold) {\n      return options.threshold > (R * c)\n    }\n\n    return R * c\n  }\n\n})()\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = haversine\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}